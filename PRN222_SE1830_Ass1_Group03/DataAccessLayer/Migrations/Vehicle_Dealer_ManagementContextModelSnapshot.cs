// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Vehicle_Dealer_ManagementContext))]
    partial class Vehicle_Dealer_ManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__dealers__3213E83F6EA72CB4");

                    b.HasIndex(new[] { "Code" }, "UQ__dealers__357D4CF9AF695B63")
                        .IsUnique();

                    b.ToTable("dealers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("unpaid")
                        .HasColumnName("payment_status");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("PK__orders__3213E83FD0233CAC");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "OrderNumber" }, "UQ__orders__730E34DF70A4AC38")
                        .IsUnique()
                        .HasFilter("[order_number] IS NOT NULL");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__order_hi__3213E83F106C6018");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderId");

                    b.ToTable("order_history", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TestDriveAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("appointment_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("PK__test_dri__3213E83F8C9A05E0");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("test_drive_appointments", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F0152B868");

                    b.HasIndex("DealerId");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E616475455A96")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__users__F3DBC5725CDAFAE2")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("brand");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("images");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("price");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("specifications");

                    b.Property<int?>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_quantity");

                    b.Property<int?>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("PK__vehicles__3213E83F5CB7D8D6");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_orders_customers");

                    b.HasOne("BusinessObjects.Models.Dealer", "Dealer")
                        .WithMany("Orders")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK_orders_dealers");

                    b.HasOne("BusinessObjects.Models.Vehicle", "Vehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_orders_vehicles");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderHistory", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "CreatedByNavigation")
                        .WithMany("OrderHistories")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_order_history_users");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_order_history_orders");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.TestDriveAppointment", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Customer")
                        .WithMany("TestDriveAppointments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_testdrive_customer");

                    b.HasOne("BusinessObjects.Models.Dealer", "Dealer")
                        .WithMany("TestDriveAppointments")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK_testdrive_dealer");

                    b.HasOne("BusinessObjects.Models.Vehicle", "Vehicle")
                        .WithMany("TestDriveAppointments")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_testdrive_vehicle");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.HasOne("BusinessObjects.Models.Dealer", "Dealer")
                        .WithMany("Users")
                        .HasForeignKey("DealerId")
                        .HasConstraintName("FK_users_dealers");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("BusinessObjects.Models.Dealer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TestDriveAppointments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("OrderHistories");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");

                    b.Navigation("TestDriveAppointments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Vehicle", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TestDriveAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
